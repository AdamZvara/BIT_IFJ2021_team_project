TOK_KEYWORD : require
TOK_STRING : ifj21
TOK_KEYWORD : function
TOK_ID : factorial
TOK_LBRACKET
TOK_ID : n
TOK_COLON
TOK_KEYWORD : integer
TOK_RBRACKET
TOK_COLON
TOK_KEYWORD : integer
TOK_KEYWORD : local
TOK_ID : n1
TOK_COLON
TOK_KEYWORD : integer
TOK_ASSIGN
TOK_ID : n
TOK_MINUS
TOK_INT : 1
TOK_KEYWORD : if
TOK_ID : n
TOK_LES
TOK_INT : 2
TOK_KEYWORD : then
TOK_KEYWORD : return
TOK_INT : 1
TOK_KEYWORD : else
TOK_KEYWORD : local
TOK_ID : tmp
TOK_COLON
TOK_KEYWORD : integer
TOK_ASSIGN
TOK_ID : factorial
TOK_LBRACKET
TOK_ID : n1
TOK_RBRACKET
TOK_KEYWORD : return
TOK_ID : n
TOK_MUL
TOK_ID : tmp
TOK_KEYWORD : end
TOK_KEYWORD : end
TOK_KEYWORD : function
TOK_ID : main
TOK_LBRACKET
TOK_RBRACKET
TOK_ID : write
TOK_LBRACKET
TOK_STRING : Zadejte cislo pro vypocet faktorialu: 
TOK_RBRACKET
TOK_KEYWORD : local
TOK_ID : a
TOK_COLON
TOK_KEYWORD : integer
TOK_ASSIGN
TOK_ID : readi
TOK_LBRACKET
TOK_RBRACKET
TOK_KEYWORD : if
TOK_ID : a
TOK_NEQ
TOK_KEYWORD : nil
TOK_KEYWORD : then
TOK_KEYWORD : if
TOK_ID : a
TOK_LES
TOK_INT : 0
TOK_KEYWORD : then
TOK_ID : write
TOK_LBRACKET
TOK_STRING : Faktorial nejde spocitat!
TOK_COMMA
TOK_STRING : 

TOK_RBRACKET
TOK_KEYWORD : else
TOK_KEYWORD : local
TOK_ID : vysl
TOK_COLON
TOK_KEYWORD : integer
TOK_ASSIGN
TOK_ID : factorial
TOK_LBRACKET
TOK_ID : a
TOK_RBRACKET
TOK_ID : write
TOK_LBRACKET
TOK_STRING : Vysledek je 
TOK_COMMA
TOK_ID : vysl
TOK_COMMA
TOK_STRING : 

TOK_RBRACKET
TOK_KEYWORD : end
TOK_KEYWORD : else
TOK_ID : write
TOK_LBRACKET
TOK_STRING : Chyba pri nacitani celeho cisla!

TOK_RBRACKET
TOK_KEYWORD : end
TOK_KEYWORD : end
TOK_ID : main
TOK_LBRACKET
TOK_RBRACKET
